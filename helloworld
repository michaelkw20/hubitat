definition(
    name: "Turn On/Off Switches with Temperature",
    namespace: "yournamespace",
    author: "Your Name",
    description: "Turn on/off switches based on temperature",
    category: "My Apps",
    iconUrl: "",
    iconX2Url: "",
    iconX3Url: ""
)

preferences {
    section("Switch Settings") {
        input "triggerSwitch", "capability.switch", title: "Select Trigger Switch", required: true
        input "switch1", "capability.switch", title: "Select Switch 1", required: true
        input "switch2", "capability.switch", title: "Select Switch 2", required: true
        input "switch3", "capability.switch", title: "Select Switch 3", required: true
    }
    section("Temperature Settings") {
        input "thermostat", "capability.thermostat", title: "Select Thermostat", required: true
    }
}

def installed() {
    subscribe(triggerSwitch, "switch.on", triggerSwitchHandler)
    subscribe(triggerSwitch, "switch.off", triggerSwitchHandler)
    subscribe(thermostat, "temperature", temperatureHandler) // Subscribe to temperature updates
    updateLoggingLevel(4) // Set logging level to 4 (debug)
    log.info("Turn On/Off Switches with Temperature app installed. Logging enabled.")
}

def updated() {
    unsubscribe()
    subscribe(triggerSwitch, "switch.on", triggerSwitchHandler)
    subscribe(triggerSwitch, "switch.off", triggerSwitchHandler)
    subscribe(thermostat, "temperature", temperatureHandler) // Subscribe to temperature updates
}

def updateLoggingLevel(level) {
    state.loggingLevel = level.toString()
    log.info("Logging level set to ${level}")
}

def triggerSwitchHandler(evt) {
    if (evt.value == "on") {
        if (isTemperatureAboveThreshold(8)) {
            switch1.on()
            log.info("Turning on Switch 1: Wetting cooling pads")
            runIn(10, turnOnSwitch3)
            log.info("Requesting fan to start on high speed in 1 minute")
        } else if (!switch3.currentSwitch == "on" && !switch2.currentSwitch == "on" && isTemperatureAboveThreshold(2)) {
            switch1.on()
            log.info("Turning on Switch 1: Wetting cooling pads")
            runIn(10, turnOnSwitch2)
            log.info("requesting fan to start on lo mode in 1 minute")
        } else if (isTemperatureAboveThreshold(2) && isTemperatureBelowThreshold(8)) {
            // turn on Switch 2 if the temperature is in the desired range.
            switch1.on()
            log.info("Turning on Switch1: Wetting cooling pads")
            runIn(10, turnOnSwitch2)
            log.info("requesting fan to start on lo mode in 1 minute")
            // turn switch 1 on if it is not already on.
             } else if (isTemperatureAboveThreshold(2) && !switch1.currentSwitch == "on") {
            switch1.on()
            log.info("Turning on Switch 1")
        }   else if (isTemperatureBelowThreshold(2) && !switch1.currentSwitch == "on") {
            switch1.off()
            log.info("Turning switch 1 off as temperature is below threshold")
        }
        }
    } else {
        switch1.off()
        switch2.off()
        switch3.off()
        log.info("Turning switch 1, 2 and 3 off")
    }

def turnOnSwitch1() {
    if (isTemperatureAboveThreshold(2)) {
        switch1.on()
        log.info("Turning on Switch 1")
    } else {
        switch1.off()
        log.info("Turning off Switch 1")
    }
}

def turnOnSwitch2() {
    switch2.on()
    log.info("Turning on Switch 2: Starting fan in lo mode")
}

def turnOnSwitch3() {
    if (isTemperatureAboveThreshold(8)) {
        switch3.on()
        log.info("Turning on Switch 3: Turning on high-speed fan")
    } else {
        switch3.off()
        log.info("Turning off Switch 3: Turning off high-speed fan")
    }
}
//Temp below 8 degrees above set point
def isTemperatureBelowThreshold(threshold) {
    def currentTemperature = thermostat.currentValue("temperature")
    def coolingSetpoint = thermostat.currentValue("coolingSetpoint")
    def temperatureThreshold = coolingSetpoint + threshold
    return currentTemperature < temperatureThreshold
}

//Temp above 8 degrees above the set point
def isTemperatureAboveThreshold(threshold) {
    def currentTemperature = thermostat.currentValue("temperature")
    def coolingSetpoint = thermostat.currentValue("coolingSetpoint")
    def temperatureThreshold = coolingSetpoint + threshold
    return currentTemperature > temperatureThreshold
}

def temperatureHandler(evt) {
    // This handler will be called when the thermostat reports a temperature change
    // You can add any temperature-related logic here if needed
    log.info("Temperature updated to ${evt.value}")
}
